from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from texts.messages import WELCOME, HELP
from fsm.quest_logic import QuestStates
from db.help_db_commands import (add_player_to_team, get_team_players, 
                                 update_game_state, get_exist_teams, create_team_if_not_exists, update_game_progress)
from main import BASE_DIR, bot


# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ —Ç–æ–∂–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
QUEST_DATA = {
    1: {  # team_id
        "player_1": {
            "question": "–ß—Ç–æ —Ä–∞—Å—Ç—ë—Ç –≤ –æ–≥–æ—Ä–æ–¥–µ?",
            "answers": ["–ª—É–∫", "–º–æ—Ä–∫–æ–≤—å", "–∫–∞—Ä—Ç–æ—à–∫–∞"],
            "next_player": "player_2",
            "image": f"{BASE_DIR}/images/map1.png",
        },
        "player_2": {
            "question": "–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª —Å–∞–º—ã–π –ª–µ–≥–∫–∏–π?",
            "answers": ["–∞–ª—é–º–∏–Ω–∏–π", "–ª–∏—Ç–∏–π", "–º–∞–≥–Ω–∏–π"],
            "next_player": None,
            "image": f"{BASE_DIR}/images/map2.png",
        },
        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    }
}

# QUEST_DATA = {
#     1: {
#         "question": "–ß—Ç–æ —Ä–∞—Å—Ç—ë—Ç –≤ –æ–≥–æ—Ä–æ–¥–µ?",
#         "answers": ["–ª—É–∫", "–º–æ—Ä–∫–æ–≤—å", "–∫–∞—Ä—Ç–æ—à–∫–∞"],
#         "image": f"{BASE_DIR}/images/map1.png",
#         "next_step": 2
#     },
#     2: {
#         "question": "–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª —Å–∞–º—ã–π –ª–µ–≥–∫–∏–π?",
#         "answers": ["–∞–ª—é–º–∏–Ω–∏–π", "–ª–∏—Ç–∏–π", "–º–∞–≥–Ω–∏–π"],
#         "image": f"{BASE_DIR}/images/map2.png",
#         "next_step": None  # –ö–æ–Ω–µ—Ü –∫–≤–µ—Å—Ç–∞
#     }
# }

async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()

    team_id = 1

    if team_id not in await get_exist_teams():
        team_id, created = await create_team_if_not_exists('first')
        if created:
            await add_player_to_team(
                    message.from_user.id,
                    message.from_user.username,
                    team_id
                )
            await message.answer("–í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É! –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        if message.from_user.id not in await get_team_players(team_id):
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É —Å ID 1
            await add_player_to_team(
                message.from_user.id,
                message.from_user.username,
                team_id
            )
            await message.answer("–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–∞–Ω–¥—É! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
        else:
            await message.answer("–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ!")

    # builder = InlineKeyboardBuilder()
    # builder.add(types.InlineKeyboardButton(
    #     text="–ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç",
    #     callback_data="start_quest"
    # ))
    # await message.answer(
    #     WELCOME.format(name=message.from_user.first_name),
    #     reply_markup=builder.as_markup()
    # )

async def cmd_help(message: types.Message):
    await message.answer(HELP)

async def start_quest(message: types.Message, state: FSMContext):
    team_id = 1
    players = await get_team_players(team_id)
    
    if not players:
        await message.answer("–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    first_player = players[0]
    await update_game_progress(team_id, first_player, 1, "playing")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    question = QUEST_DATA[team_id]["player_1"]["question"]
    await bot.send_message(first_player, f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à –≤–æ–ø—Ä–æ—Å: {question}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    await state.update_data(
        team_id=team_id,
        current_player_idx=0,
        question_num=1
    )
    await state.set_state(QuestStates.waiting_for_answer)
    
    await message.answer("–ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª –≤–æ–ø—Ä–æ—Å.")
    
    # team_id = 1
    # players = await get_team_players(team_id)
    
    # if not players:
    #     await message.answer("–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!")
    #     return
    
    # await update_game_state(team_id, 0, "playing")
    # first_player = players[0]
    
    # await bot.send_message(
    #     first_player,
    #     f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à –≤–æ–ø—Ä–æ—Å: {QUEST_DATA[team_id]['player_1']['question']}"
    # )
    # await message.answer("–ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª –≤–æ–ø—Ä–æ—Å.")

    # await callback.message.answer('–•–æ—Ä–æ—à–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º...')
    # await callback.answer()
    # await send_question(1, callback.message, state)

async def send_question(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    team_id = user_data["team_id"]
    current_idx = user_data["current_player_idx"]
    question_num = user_data["question_num"]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    question_data = QUEST_DATA[team_id][f"player_{question_num}"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    await message.answer(f"–í–æ–ø—Ä–æ—Å {question_num}: {question_data['question']}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞
    await state.update_data(
        correct_answers=question_data["answers"],
        next_player=question_data["next_player"],
        deadline=datetime.now() + timedelta(minutes=5)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    await state.set_state(QuestStates.waiting_for_answer)

async def process_answer(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    team_id = user_data["team_id"]
    current_idx = user_data["current_player_idx"]
    question_num = user_data["question_num"]
    
    players = await get_team_players(team_id)
    current_player = players[current_idx]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫
    if message.from_user.id != current_player:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return
    
    question_data = QUEST_DATA[team_id][f"player_{question_num}"]
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if message.text.lower() in [a.lower() for a in question_data["answers"]]:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        next_player_num = int(question_data["next_player"].split("_")[1])
        
        if next_player_num > len(players):
            await message.answer("üéâ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –∫–≤–µ—Å—Ç!")
            await state.clear()
            return
            
        next_player = players[next_player_num - 1]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await update_game_progress(
            team_id, 
            next_player,
            next_player_num,
            "playing"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        try:
            photo = types.FSInputFile(question_data["image"])
            await message.answer_photo(photo, caption="–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞!")
        except FileNotFoundError:
            await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(text="–Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data="arrived")
        
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏:",
            reply_markup=builder.as_markup()
        )
        
        await state.update_data(
            current_player_idx=next_player_num - 1,
            question_num=next_player_num
        )
        await state.set_state(QuestStates.waiting_for_location_confirmation)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        
    # user_data = await state.get_data()
    
    # # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    # if datetime.now() > user_data["deadline"]:
    #     correct_answers = ", ".join(user_data["correct_answers"])
    #     await message.answer(f"–í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers}")
    #     await proceed_to_next_step(user_data["next_step"], message, state)
    #     return
    
    # # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    # if message.text.lower() in [ans.lower() for ans in user_data["correct_answers"]]:
    #     await message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!")
    #     await proceed_to_next_step(user_data["next_step"], message, state)
    # else:
    #     await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

async def proceed_to_next_step(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    next_player = user_data.get("next_player")
    
    if not next_player:
        await message.answer("üéâ –ö–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
        await state.clear()
        return
    
    next_player_num = int(next_player.split("_")[1])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        current_player_idx=next_player_num - 1,
        question_num=next_player_num
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    team_id = user_data["team_id"]
    question_data = QUEST_DATA[team_id][f"player_{next_player_num}"]
    
    try:
        photo = types.FSInputFile(question_data["image"])
        await message.answer_photo(photo, caption="–í–æ—Ç —Å–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ –≤–∞—à–µ–≥–æ –∫–≤–µ—Å—Ç–∞!")
    except FileNotFoundError:
        await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å –∫–∞—Ä—Ç–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–±—ã—Ç–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–Ø –ø—Ä–∏–±—ã–ª –Ω–∞ –º–µ—Å—Ç–æ",
        callback_data="arrived"
    ))
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –∫–æ–≥–¥–∞ –¥–æ–±–µ—Ä—ë—Ç–µ—Å—å –¥–æ –º–µ—Å—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(QuestStates.waiting_for_location_confirmation)

async def confirm_arrival(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_question(callback.message, state)
