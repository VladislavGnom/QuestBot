from datetime import datetime, timedelta
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramForbiddenError

from texts.messages import WELCOME, HELP
from fsm.quest_logic import QuestStates
from db.help_db_commands import (add_player_to_team, get_team_players, 
                                 update_game_state, get_exist_teams, create_team_if_not_exists, 
                                 update_game_progress, generate_invite_link, create_team, join_team,
                                 get_team_name, is_admin, get_team_captain, mention_user, get_user_team)
from main import BASE_DIR, bot


# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–∞ (–º–æ–∂–Ω–æ —Ç–æ–∂–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
QUEST_DATA = {
    1: {  # team_id
        "player_1": {
            "question": "–ß—Ç–æ —Ä–∞—Å—Ç—ë—Ç –≤ –æ–≥–æ—Ä–æ–¥–µ?",
            "answers": ["–ª—É–∫", "–º–æ—Ä–∫–æ–≤—å", "–∫–∞—Ä—Ç–æ—à–∫–∞"],
            "next_player": "player_2",
            "image": f"{BASE_DIR}/images/map1.png",
        },
        "player_2": {
            "question": "–ö–∞–∫–æ–π –º–µ—Ç–∞–ª–ª —Å–∞–º—ã–π –ª–µ–≥–∫–∏–π?",
            "answers": ["–∞–ª—é–º–∏–Ω–∏–π", "–ª–∏—Ç–∏–π", "–º–∞–≥–Ω–∏–π"],
            "next_player": None,
            "image": f"{BASE_DIR}/images/map2.png",
        },
    }
}

# async def cmd_start(message: types.Message, state: FSMContext):
#     await state.clear()
#     team_id = 1
#     team_name = 'fisrt'

#     if team_id not in await get_exist_teams():
#         team_id, created = await create_team_if_not_exists(team_name)
#         if not created:
#             await message.answer("–û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
#             return
            
#     if message.from_user.id not in await get_team_players(team_id):
#         await add_player_to_team(
#             message.from_user.id,
#             message.from_user.username,
#             team_id
#         )
#         await message.answer("–í—ã –≤ –∫–æ–º–∞–Ω–¥–µ! –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
#     else:
#         await message.answer("–í—ã —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ!")

async def cmd_show_player_number_position_in_team(message: types.Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    

async def cmd_help(message: types.Message):
    await message.answer(HELP)

async def start_quest(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    team_id = await get_user_team(user_id)
    players = await get_team_players(team_id)

    if not players:
        await message.answer("–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤!")
        return
    
    first_player = players[0]
    first_player_id = first_player["id"]

    await update_game_progress(team_id, first_player_id, 1, "playing")
    
    question = QUEST_DATA[team_id]["player_1"]["question"]
    await bot.send_message(
        first_player_id, 
        f"–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –í–∞—à –≤–æ–ø—Ä–æ—Å: {question}"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    await notify_team_except_current(
        team_id, 
        first_player_id, 
        "–ö–≤–µ—Å—Ç –Ω–∞—á–∞—Ç! –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª –≤–æ–ø—Ä–æ—Å."
    )
    
    await state.update_data(
        team_id=team_id,
        current_player_idx=0,
        question_num=1,
        players_order=players  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä–æ–∫–æ–≤
    )
    await state.set_state(QuestStates.waiting_for_answer) 

async def send_question(player_id: int, message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    team_id = user_data["team_id"]
    question_num = user_data["question_num"]
    
    question_data = QUEST_DATA[team_id][f"player_{question_num}"]

    await bot.send_message(
        player_id, 
        f"–í–æ–ø—Ä–æ—Å {question_num}: {question_data['question']}"
    )
    
    await state.update_data(
        correct_answers=question_data["answers"],
        next_player=question_data["next_player"],
        deadline=datetime.now() + timedelta(minutes=5)
    )
    await state.set_state(QuestStates.waiting_for_answer)

async def process_answer(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    team_id = user_data["team_id"]
    current_idx = user_data["current_player_idx"]
    question_num = user_data["question_num"]
    players = user_data["players_order"]
    
    if message.from_user.id != players[current_idx].get('id'):
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")
        return
    
    question_data = QUEST_DATA[team_id][f"player_{question_num}"]
    
    if message.text.lower() not in [a.lower() for a in question_data["answers"]]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    next_player = question_data["next_player"]
    if not next_player:
        await message.answer("üéâ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ –∫–≤–µ—Å—Ç!")
        await state.clear()
        return
    
    next_player_num = int(next_player.split("_")[1])
    if next_player_num > len(players):
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞")
        return
        
    await update_game_progress(
        team_id, 
        players[next_player_num-1].get('id'),
        next_player_num,
        "playing"
    )
    
    try:
        photo = types.FSInputFile(question_data["image"])
        await message.answer_photo(photo, caption="–°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞!")
    except FileNotFoundError:
        await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–Ø –Ω–∞ –º–µ—Å—Ç–µ", callback_data="arrived")
    
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏:",
        reply_markup=builder.as_markup()
    )
    
    await state.update_data(
        current_player_idx=next_player_num-1,
        question_num=next_player_num
    )
    await state.set_state(QuestStates.waiting_for_location_confirmation)

async def notify_team_except_current(team_id: int, current_player_id: int, message_text: str):
    players = await get_team_players(team_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    for player_data in players:
        player_id = player_data.get('id')
        if player_id != current_player_id:
            try:
                await bot.send_message(player_id, message_text)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player_id}: {e}")
            except TelegramForbiddenError:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {player_id} –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º")

async def confirm_arrival(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await send_question(callback.message.from_user.id, callback.message, state)


async def cmd_create_team(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not await is_admin(message.from_user.id):  # –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
        return await message.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã!")
    
    team_name = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
    if not team_name:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: /create_team –ù–∞–∑–≤–∞–Ω–∏–µ–ö–æ–º–∞–Ω–¥—ã")
    
    team_id = await create_team(message.from_user.id, team_name)
    invite_link = await generate_invite_link(message.bot, team_id, team_name)
    
    await message.answer(
        f"–ö–æ–º–∞–Ω–¥–∞ '{team_name}' —Å–æ–∑–¥–∞–Ω–∞!\n"
        f"–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{invite_link}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.",
        disable_web_page_preview=True
    )

async def handle_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–æ–π"""
    await state.clear()

    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–∞–Ω–¥–µ
    current_team = await get_user_team(user_id)

    if current_team:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ - –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        team_name = await get_team_name(current_team)
        captain_id = await get_team_captain(current_team)
        
        text = (
            f"–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ '{team_name}'\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∫–≤–µ—Å—Ç–∞ –æ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.\n"
            f"–ö–∞–ø–∏—Ç–∞–Ω: {await mention_user(captain_id)}"
        )
            
        return await message.answer(text)

    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    if args and args.startswith('join_'):
        _, team_id, token = args.split('_', maxsplit=2)[:3]
        try:
            team_id = int(team_id)
        except ValueError:
            return await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞!")
        
        success = await join_team(message, team_id, token)

        if success:
            team_name = await get_team_name(team_id)
            return await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–∞–Ω–¥–µ {team_name}!')
        return await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç—É–ø–∏—Ç—å: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –≤—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
    
    # –û–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ —Å—Å—ã–ª–∫–∏
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É.")
